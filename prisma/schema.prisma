// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  password    String
  tel         String
  address     String
  isAdmin     Boolean   @default(false)
  cart        Cart[]
  review      Review[]
  favorite    Favorite[]
  order       Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([email])
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  image       String
  price       Int
  active      Boolean    @default(true)
  stock       Int       @default(0)
  version     Int       @default(0)
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  cartItem    CartItem[]
  review      Review[]
  favorite    Favorite[]
  orderDetail OrderDetail[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([name])
  @@index([price])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [buyerId], references: [id])
  buyerId   String
  cartItem  CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([buyerId])
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId, productId])
}

model Order {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [buyerId], references: [id])
  buyerId     String
  totalPrice  Int
  orderDetail OrderDetail[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([buyerId])
}

model OrderDetail {
  id          String   @id @default(uuid())
  quantity    Int
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  priceAtTime Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [buyerId], references: [id])
  buyerId   String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [buyerId], references: [id])
  buyerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([buyerId, productId])
}